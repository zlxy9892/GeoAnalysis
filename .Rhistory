plot3d(df2)
ix = sample.int(nrow(df), 10000, replace = F)
df2 = df[ix,]
plot3d(df2)
ix = sample.int(nrow(df), 1000, replace = F)
df2 = df[ix,]
plot3d(df2)
hist(df2$z)
ix = sample.int(nrow(df), 50, replace = F)
df2 = df[ix,]
hist(df2$z)
?sann
optim()
?optim
fw <- function (x)
10*sin(0.3*x)*sin(1.3*x^2) + 0.00001*x^4 + 0.2*x+80
plot(fw, -50, 50, n = 1000, main = "optim() minimising 'wild function'")
res <- optim(50, fw, method = "SANN",
control = list(maxit = 20000, temp = 20, parscale = 20))
res$value
res$par
res <- optim(5, fw, method = "SANN", control = list(maxit = 20000, temp = 20, parscale = 20))
res
ff < function(x)
sin(x)
ff <- function(x)
sin(x)
plot(ff, -10, 10)
plot(ff, -10, 10, n=100)
plot(ff, -10, 10, n=10)
plot(ff, -10, 10, n=1000)
xx = rnorm(1000, 100, 40)
hist(xx)
xx = rnorm(1000, 1000, 40)
hist(xx)
ff <- function(x)
?sample
?sample
ff <- function(x)
sum(sample(x), size=30, replace=F)
plot(ff)
plot(ff, 0, 1000)
init = sample(xx, 30, replace = F)
res <- optim(init, ff, method = "SANN", control = list(maxit = 20000, temp = 20, parscale = 20))
res <- optim(init, ff, method = "SANN")
res
hist(res$par)
hist(xx)
sort(xx)
sort(res$par)
sort(xx)
?optim
ff <- function()
sum(sample(xx, size = 30, replace = F))
ff
plot(ff)
xx
res <- optim(init, ff, method = "SANN")
res <- optim(par=init, ff, method = "SANN")
init
ff <- function(x)
sum(sample(x, size = 30, replace = F))
res <- optim(par=xx, ff, method = "SANN")
res
xx
library(sp)
library(spsann)
library(gstat)
?optimUSER
?kmeans
?dist
library(quantmod)
require('quantmod')
install.packages("quantmod")
library(quantmod)
getSymbols("^SSEC")
chartSeries(SSEC, up.col='red', dn.col='green', TA="addVo(); addMACD(); addSMA(n=10)")
?qnorm
qnorm(0)
qnorm(0.1)
qnorm(0.5)
qnorm(0.95)
qnorm(1)
qnorm(1.1)
qnorm(0.999)
qnorm(0.99999999999999999999999999)
qnorm(0.99999999)
qnorm(0.95)
qnorm(0.95)
library(spcosa)
library(sp)
source('Functions4SSA.R')
source('./Functions4SSA.R')
grd<-read.csv(file="./data/HunterValley4Practicals.csv",header=TRUE)
setwd("D:/MyWork/myres/GeoAnalysis")
source('Functions4SSA.R')
grd<-read.csv(file="./data/HunterValley4Practicals.csv",header=TRUE)
View(grd)
type(grd)
grid
grd
head(grd)
str(grd)
class(grd)
grd$Easting[0]
grd$Easting
grd$Easting[0]
grd$Easting(0)
grd[0]
grd[0,1]
grd$Easting[1]
grd$Easting[2]
grd$Easting[55]
grd$Easting[3]
grd$Easting[4]
grd$Easting[4]-grd$Easting[1]
?round
round(10)
round(10.1)
round(10.5)
round(10.7)
round(10.51)
round(10.5)
round(10.51,0)
round(-1, 0)
class(grd$Easting)
grd$Easting <- 25*round(grd$Easting/25,0)
class(grd$Easting)
grd$Easting[4]
grd$Easting[1]
grd$Northing <- 25*round(grd$Northing/25,0)
class(grd$Easting[1])
class(grd$elevation_m[1])
col.xy <- c(1,2)
col.cov <- c(3,4,5,6,7)
R<-cor(grd[,col.cov])
View(R)
grid <- SpatialPixelsDataFrame(
points = grd[,col.xy],
data   = grd[,col.cov]
)
class(grid)
grid@coords.nrs
grid@coords
set.seed(314)
ids <- sample.int(nrow(grd),10)
legacy <- SpatialPoints(
coords=grd[ids,col.xy]
)
legacy@coords
legacy@bbox
set.seed(314)
samplesize<-50 #number of additional points
ntot <- samplesize+length(legacy)
myStrata <- stratify(grid, nStrata=ntot, priorPoints=legacy, equalArea=FALSE, nTry=1)
mySample <- spsample(myStrata)
plot(myStrata, mySample)
?stratify
class(mySample)
mySample@sample
class(mySample@sample
)
mySample@sample@coords
mySample@isPriorPoint
ids <- which(mySample@isPriorPoint==F)
ids
mySample <- as(mySample, "SpatialPoints")
mySample <- mySample[ids,]
mySample
by=1/ntot
probs<-seq(from=0,to=1,by=by)
probs
last<-length(probs)
last
lb<-matrix(ncol=length(col.cov),nrow=length(probs)-1)
View(lb)
quantile(grd[,col.cov[1]],probs=probs)
1/60
q <- quantile(grd[,col.cov[1]],probs=probs)
-q[-last]
by=1/ntot
probs<-seq(from=0,to=1,by=by)
last<-length(probs)
lb<-matrix(ncol=length(col.cov),nrow=length(probs)-1)
for (i in 1:length(col.cov)) {
q<-quantile(grd[,col.cov[i]],probs=probs)
lb[,i]<-q[-last]
}
arr1 = c(1,2,3,4,5,6,7,8,9,10)
quantile(arr1)
wO1<-0.5
#now start the annealing
system.time(
annealingResult <- anneal.cLHS(
d = mySample,
g = grid,
legacy = legacy,
lb = lb,
wO1=wO1,
R=R,
initialTemperature = 2,
coolingRate = 0.9,
maxAccepted = 5*length(mySample),
maxPermuted = 5*length(mySample),
maxNoChange=10,
verbose = "TRUE"
)
)
save(annealingResult,file="LHSample_50(0.5).Rdata")
load(file="LHSample_50(0.5).Rdata")
optSample<-as(annealingResult$optSample, "data.frame")
View(optSample)
Eall<-annealingResult$Criterion
View(Eall)
legacy <- as(legacy,"data.frame")
ggplot(data=grd) +
geom_tile(mapping = aes(x = Easting, y = Northing, fill = cti)) +
geom_point(data = optSample, mapping = aes(x = Easting, y = Northing), colour = "black") +
geom_point(data = legacy, mapping = aes(x = Easting, y = Northing), colour = "red") +
scale_x_continuous(name = "Easting (km)") +
scale_y_continuous(name = "Northing (km)") +
scale_fill_gradient(name="cti",low = "darkblue", high = "red")+
coord_fixed()
coordinates(optSample)<-~Easting+Northing
optSample <- over(optSample,grid)
class(optSample)
coordinates(legacy)<-~Easting+Northing
?over
ggplot(data=grd) +
geom_point(mapping = aes(x = cti, y = elevation_m), colour = "black",size=1,alpha=0.5) +
geom_point(data=as.data.frame(optSample), mapping = aes(x = cti, y = elevation_m), colour = "red",size=2) +
geom_point(data=as.data.frame(legacy), mapping = aes(x = cti, y = elevation_m), colour = "green",size=2) +
scale_x_continuous(name = "Cti") +
scale_y_continuous(name = "Elevation")
ggplot(data=grd) +
geom_point(mapping = aes(x = cti, y = elevation_m), colour = "black", size=1, alpha=0.5) +
geom_point(data=as.data.frame(optSample), mapping = aes(x = cti, y = elevation_m), colour = "red", size=2) +
geom_point(data=as.data.frame(legacy), mapping = aes(x = cti, y = elevation_m), colour = "green", size=2)
grd
head(grd)
ggplot(data=grd) +
geom_point(mapping = aes(x = cti, y = elevation_m), colour = "black", size=1, alpha=0.5) +
geom_point(data=as.data.frame(optSample), mapping = aes(x = cti, y = elevation_m), colour = "red", size=2) +
geom_point(data=as.data.frame(legacy), mapping = aes(x = cti, y = elevation_m), colour = "green", size=2) +
scale_x_continuous(name = "Cti") +
scale_y_continuous(name = "Elevation")
class(optSample)
optSample$cti
ggplot(data=grd) +
geom_point(mapping = aes(x = cti, y = elevation_m), colour = "black", size=1, alpha=0.5)
ggplot(data=grd) +
geom_point(mapping = aes(x = cti, y = elevation_m), colour = "black", size=1, alpha=0.5) +
geom_point(data=optSample, mapping = aes(x = cti, y = elevation_m), colour = "red", size=2)
ggplot(data=grd) +
geom_point(mapping = aes(x = cti, y = elevation_m), colour = "black", size=1, alpha=0.5) +
geom_point(data=as.data.frame(optSample), mapping = aes(x = cti, y = elevation_m), colour = "red", size=2)
class(legacy)
coordinates(legacy)<-~Easting+Northing
legacy <- over(legacy, grid)
ggplot(data=grd) +
geom_point(mapping = aes(x = cti, y = elevation_m), colour = "black", size=1, alpha=0.5) +
geom_point(data=as.data.frame(optSample), mapping = aes(x = cti, y = elevation_m), colour = "red", size=2) +
geom_point(data=as.data.frame(legacy), mapping = aes(x = cti, y = elevation_m), colour = "green", size=2) +
scale_x_continuous(name = "Cti") +
scale_y_continuous(name = "Elevation")
index<-seq(1:samplesize)
countsdf<-as.data.frame(counts)
View(grd)
library(spcosa)
setwd("D:/MyWork/myres/GeoAnalysis")
library(sp)
# Source annealing functions
source('Functions4SSA.R')
grd<-read.csv(file="./data/envdata_raf.csv",header=TRUE)
head(grd)
cellsize = 10
grd$Easting <- cellsize * round(grd$Easting/cellsize, 0)
grd$Easting <- cellsize * round(grd$x/cellsize, 0)
library(spcosa)
library(sp)
# Source annealing functions
source('Functions4SSA.R')
# Read grid with covariates
grd<-read.csv(file="./data/envdata_raf.csv",header=TRUE)
head(grd)
View(grd)
cellsize = 10
grd$x <- cellsize * round(grd$x/cellsize, 0)
grd$y <- cellsize * round(grd$y/cellsize, 0)
head(grd)
col.xy <- c(1,2)
col.cov <- c(4,5,6,7,8,9)
R<-cor(grd[,col.cov])
grid <- SpatialPixelsDataFrame(
points = grd[,col.xy],
data   = grd[,col.cov]
)
set.seed(314)
ids <- sample.int(nrow(grd),10)
legacy <- SpatialPoints(
coords=grd[ids,col.xy]
)
set.seed(314)
samplesize<-50 #number of additional points
ntot <- samplesize+length(legacy)
myStrata <- stratify(grid, nStrata=ntot, priorPoints=legacy, equalArea=FALSE, nTry=1)
mySample <- spsample(myStrata)
plot(myStrata, mySample)
set.seed(272)
samplesize<-50 #number of additional points
ntot <- samplesize+length(legacy)
myStrata <- stratify(grid, nStrata=ntot, priorPoints=legacy, equalArea=FALSE, nTry=1)
mySample <- spsample(myStrata)
plot(myStrata, mySample)
set.seed(314)
samplesize<-50 #number of additional points
ntot <- samplesize+length(legacy)
myStrata <- stratify(grid, nStrata=ntot, priorPoints=legacy, equalArea=FALSE, nTry=1)
mySample <- spsample(myStrata)
plot(myStrata, mySample)
set.seed(272)
ids <- sample.int(nrow(grd),10)
legacy <- SpatialPoints(
coords=grd[ids,col.xy]
)
set.seed(272)
samplesize<-50 #number of additional points
ntot <- samplesize+length(legacy)
myStrata <- stratify(grid, nStrata=ntot, priorPoints=legacy, equalArea=FALSE, nTry=1)
mySample <- spsample(myStrata)
plot(myStrata, mySample)
ids <- which(mySample@isPriorPoint==F)
mySample <- as(mySample, "SpatialPoints")
mySample <- mySample[ids,]
by=1/ntot
probs<-seq(from=0,to=1,by=by)
last<-length(probs)
lb<-matrix(ncol=length(col.cov),nrow=length(probs)-1)
for (i in 1:length(col.cov)) {
q<-quantile(grd[,col.cov[i]],probs=probs)
lb[,i]<-q[-last]
}
wO1<-0.5
system.time(
annealingResult <- anneal.cLHS(
d = mySample,
g = grid,
legacy = legacy,
lb = lb,
wO1=wO1,
R=R,
initialTemperature = 2,
coolingRate = 0.9,
maxAccepted = 5*length(mySample),
maxPermuted = 5*length(mySample),
maxNoChange=10,
verbose = "TRUE"
)
)
save(annealingResult,file="LHSample_50(0.5)_raf.Rdata")
load(file="LHSample_50(0.5)_raf.Rdata")
optSample<-as(annealingResult$optSample, "data.frame")
Eall<-annealingResult$Criterion
legacy <- as(legacy, "data.frame")
ggplot(data=grd) +
geom_tile(mapping = aes(x = Easting, y = Northing, fill = cti)) +
geom_point(data = optSample, mapping = aes(x = Easting, y = Northing), colour = "black") +
geom_point(data = legacy, mapping = aes(x = Easting, y = Northing), colour = "red") +
scale_x_continuous(name = "Easting (km)") +
scale_y_continuous(name = "Northing (km)") +
scale_fill_gradient(name="cti",low = "darkblue", high = "red") +
coord_fixed()
ggplot(data=grd) +
geom_tile(mapping = aes(x = x, y = y, fill = cti)) +
geom_point(data = optSample, mapping = aes(x = x, y = y), colour = "black") +
geom_point(data = legacy, mapping = aes(x = x, y = y), colour = "red") +
scale_x_continuous(name = "Easting (km)") +
scale_y_continuous(name = "Northing (km)") +
scale_fill_gradient(name="cti",low = "darkblue", high = "red") +
coord_fixed()
View(grd)
ggplot(data=grd) +
geom_tile(mapping = aes(x = x, y = y, fill = env2)) +
geom_point(data = optSample, mapping = aes(x = x, y = y), colour = "black") +
geom_point(data = legacy, mapping = aes(x = x, y = y), colour = "red") +
scale_x_continuous(name = "Easting (km)") +
scale_y_continuous(name = "Northing (km)") +
scale_fill_gradient(name="elev",low = "darkblue", high = "red") +
coord_fixed()
#Make scatter plots
coordinates(optSample)<-~x+y
optSample <- over(optSample, grid)
coordinates(legacy)<-~x+y
legacy <- over(legacy, grid)
ggplot(data=grd) +
geom_point(mapping = aes(x = env2, y = env6), colour = "black", size=1, alpha=0.5) +
geom_point(data=as.data.frame(optSample), mapping = aes(x = env2, y = env6), colour = "red", size=2) +
geom_point(data=as.data.frame(legacy), mapping = aes(x = env2, y = env6), colour = "green", size=2) +
scale_x_continuous(name = "elevation") +
scale_y_continuous(name = "twi")
dev.off()
ggplot(data=grd) +
geom_point(mapping = aes(x = env2, y = env6), colour = "black", size=1, alpha=0.5) +
geom_point(data=as.data.frame(optSample), mapping = aes(x = env2, y = env6), colour = "red", size=2) +
geom_point(data=as.data.frame(legacy), mapping = aes(x = env2, y = env6), colour = "green", size=2) +
scale_x_continuous(name = "elevation") +
scale_y_continuous(name = "twi")
library(spcosa)
library(sp)
# Source annealing functions
source('Functions4SSA.R')
grd<-read.csv(file="./data/envdata_raf.csv",header=TRUE)
head(grd)
cellsize = 10
grd$x <- cellsize * round(grd$x/cellsize, 0)
grd$y <- cellsize * round(grd$y/cellsize, 0)
col.xy <- c(1,2)
col.cov <- c(4,5,6,7,8,9)
# Compute population correlation matrix of covariates
R<-cor(grd[,col.cov])
grid <- SpatialPixelsDataFrame(
points = grd[,col.xy],
data   = grd[,col.cov]
)
# Select legacy sample
set.seed(272)
ids <- sample.int(nrow(grd),10)
legacy <- SpatialPoints(
coords=grd[ids,col.xy]
)
# Select spatial infill sample which is used as initial sample in annealing
set.seed(272)
samplesize<-20 #number of additional points
ntot <- samplesize+length(legacy)
myStrata <- stratify(grid, nStrata=ntot, priorPoints=legacy, equalArea=FALSE, nTry=1)
mySample <- spsample(myStrata)
plot(myStrata, mySample)
# Select the new points from mySample
ids <- which(mySample@isPriorPoint==F)
mySample <- as(mySample, "SpatialPoints")
mySample <- mySample[ids,]
by=1/ntot
probs<-seq(from=0,to=1,by=by)
last<-length(probs)
lb<-matrix(ncol=length(col.cov),nrow=length(probs)-1)
for (i in 1:length(col.cov)) {
q<-quantile(grd[,col.cov[i]],probs=probs)
lb[,i]<-q[-last]
}
#set relative weight of O1 for computing the LHS criterion (O1 is for coverage of marginal strata of covariates); 1-W01  is the relative weight for O3 (for correlation)
wO1<-0.5
system.time(
annealingResult <- anneal.cLHS(
d = mySample,
g = grid,
legacy = legacy,
lb = lb,
wO1=wO1,
R=R,
initialTemperature = 2,
coolingRate = 0.9,
maxAccepted = 5*length(mySample),
maxPermuted = 5*length(mySample),
maxNoChange=10,
verbose = "TRUE"
)
)
save(annealingResult,file="LHSample_50(0.5)_raf.Rdata")
load(file="LHSample_50(0.5)_raf.Rdata")
save(annealingResult,file="LHSample_10_20(0.5)_raf.Rdata")
load(file="LHSample_50(0.5)_raf.Rdata")
load(file="LHSample_10_20(0.5)_raf.Rdata")
optSample<-as(annealingResult$optSample, "data.frame")
Eall<-annealingResult$Criterion
#Plot the selected points on top of one of the covariates
legacy <- as(legacy, "data.frame")
#pdf(file = "LHSample_50(05)_raf_elevation.pdf", width = 7, height = 7)
ggplot(data=grd) +
geom_tile(mapping = aes(x = x, y = y, fill = env2)) +
geom_point(data = optSample, mapping = aes(x = x, y = y), colour = "black") +
geom_point(data = legacy, mapping = aes(x = x, y = y), colour = "red") +
scale_x_continuous(name = "Easting (km)") +
scale_y_continuous(name = "Northing (km)") +
scale_fill_gradient(name="elevation", low = "darkblue", high = "red") +
coord_fixed()
#Make scatter plots
coordinates(optSample)<-~x+y
optSample <- over(optSample, grid)
coordinates(legacy)<-~x+y
legacy <- over(legacy, grid)
ggplot(data=grd) +
geom_point(mapping = aes(x = env2, y = env6), colour = "black", size=1, alpha=0.5) +
geom_point(data=as.data.frame(optSample), mapping = aes(x = env2, y = env6), colour = "red", size=2) +
geom_point(data=as.data.frame(legacy), mapping = aes(x = env2, y = env6), colour = "green", size=2) +
scale_x_continuous(name = "elevation") +
scale_y_continuous(name = "twi")
save(annealingResult,file="LHSample_10_20(0.5)_raf.Rdata")
load(file="LHSample_10_20(0.5)_raf.Rdata")
optSample
load(file="LHSample_10_20(0.5)_raf.Rdata")
annealingResult$optSample
annealingResult$optSample@coords
annealingResult$optSample@coords
legacy
set.seed(272)
ids <- sample.int(nrow(grd),10)
legacy <- SpatialPoints(
coords=grd[ids,col.xy]
)
legacy
annealingResult$optSample@coords
?kmeans
